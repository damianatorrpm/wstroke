project(
	'wstroke',
	'c',
	'cpp',
	version: '0.0.1',
	license: 'MIT',
	meson_version: '>=0.51.0',
	default_options: [
		'cpp_std=c++17',
        'c_std=c11',
		'warning_level=2',
		'werror=false',
	],
)

# dependencies for loadable plugin
glibmm = dependency('glibmm-2.4')
boost = dependency('boost', modules: ['serialization'], static: false)
wayfire = dependency('wayfire')
wlroots = dependency('wlroots')
wlserver = dependency('wayland-server')


# additional dependencies for GUI
gtkmm = dependency('gtkmm-3.0')
gdkmm = dependency('gdkmm-3.0')
glib    = dependency('glib-2.0')
gobject = dependency('gobject-2.0')
gtk     = dependency('gtk+-3.0')
gdk     = dependency('gdk-3.0')

gnome = import('gnome')
econf_res = gnome.compile_resources(
    'ecres', 'resources.xml',
    source_dir: 'data',
    c_name: 'econf'
)


# filesystem library support
# note: on Ubuntu 18.04 this only works with clang++
cpp = meson.get_compiler('cpp')
if cpp.has_link_argument('-lc++fs')
  add_project_link_arguments(['-lc++fs'], language: 'cpp')
elif cpp.has_link_argument('-lc++experimental')
  add_project_link_arguments(['-lc++experimental'], language: 'cpp')
elif cpp.has_link_argument('-lstdc++fs')
  add_project_link_arguments(['-lstdc++fs'], language: 'cpp')
endif

# note: this is code generated by Vala, compile it separately to
# silence warnings
cellib = static_library('cellib', 'cellrenderertextish.c',
		dependencies: [glib, gobject, gtk],
		c_args: ['-w'])

wconf_sources = ['main.cc', 'actiondb.cc', 'actions.cc', 'gesture.cc',
				 'stroke_draw.cc', 'stroke.c', 'convert_keycodes.cc', econf_res]
wconf = executable('wstroke-config', wconf_sources,
        dependencies: [gtkmm, gdkmm, gdk, boost],
        install: true,
        cpp_args: ['-DACTIONDB_CONVERT_CODES', '-DWLR_USE_UNSTABLE'],
        link_with: cellib)

wslib_sources = ['easystroke_gestures.cpp', 'input_events.cpp', 'actiondb.cc', 'gesture.cc', 'stroke.c']
wslib = shared_module('easystroke', wslib_sources,
    dependencies: [wayfire, wlroots, wlserver, boost, glibmm],
    install: true,
    install_dir: wayfire.get_variable(pkgconfig: 'plugindir'),
    cpp_args: ['-Wno-unused-parameter', '-Wno-format-security','-DWAYFIRE_PLUGIN', '-DWLR_USE_UNSTABLE'],
    link_args: '-rdynamic')

install_data('easystroke.xml', install_dir: wayfire.get_variable(pkgconfig: 'metadatadir'))


